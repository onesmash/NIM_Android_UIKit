def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

buildscript {
    // The Android Gradle plugin is only required when opening the android folder stand-alone.
    // This avoids unnecessary downloads and potential conflicts when the library is included as a
    // module dependency in an application project.
    if (project == rootProject) {
        repositories {
            google()
            jcenter()
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:3.4.1'
        }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'

def DEFAULT_COMPILE_SDK_VERSION = 28
def DEFAULT_BUILD_TOOLS_VERSION = "28.0.3"
def DEFAULT_MIN_SDK_VERSION = 16
def DEFAULT_TARGET_SDK_VERSION = 28
def DEFAULT_VERSION_CODE = 1
def DEFAULT_VERSION_NAME = "1.0"
def DEFAULT_SOURCE_COMPATIBILITY = "1.8"
def DEFAULT_TARGET_COMPATIBILITY = "1.8"
def DEFAULT_ANDROIDX_APPCOMPAT_VERSION = "1.1.0"
def DEFAULT_LEGACY_X_VERSION = "1.0.0"
def DEFAULT_MATERIAL_GOOGLE_VERSION = "1.0.0"
def DEFAULT_CONSTRAINT_X_VERSION = "1.1.3"

android {
    compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
    buildToolsVersion safeExtGet('buildToolsVersion', DEFAULT_BUILD_TOOLS_VERSION)

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
        targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
        versionCode safeExtGet('versionCode', DEFAULT_VERSION_CODE)
        versionName safeExtGet('versionName', DEFAULT_VERSION_NAME)

        renderscriptTargetApi safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
        renderscriptSupportModeEnabled true
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res', 'res-ptr2', 'res-chatroom']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }

    compileOptions {
        sourceCompatibility safeExtGet('sourceCompatibility', DEFAULT_SOURCE_COMPATIBILITY)
        targetCompatibility safeExtGet('targetCompatibility', DEFAULT_TARGET_COMPATIBILITY)
    }

    packagingOptions{
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
    }
}

repositories {
    mavenLocal()
    google()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    api fileTree(dir: 'libs', include: '*.jar')
    api("androidx.appcompat:appcompat:${safeExtGet('androidxAppcompat', DEFAULT_ANDROIDX_APPCOMPAT_VERSION)}")
    api("androidx.legacy:legacy-support-v4:${safeExtGet('androidxLegacy', DEFAULT_LEGACY_X_VERSION)}")
    api("com.google.android.material:material:${safeExtGet('androidMaterial', DEFAULT_MATERIAL_GOOGLE_VERSION)}")
    api("androidx.constraintlayout:constraintlayout:${safeExtGet('constraintlayout', DEFAULT_CONSTRAINT_X_VERSION)}")

//    api 'me.everything:overscroll-decor-android:1.0.4'
    api "me.leolin:ShortcutBadger:1.1.22@aar"

    api 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    //api 'jp.wasabeef:glide-transformations:3.0.1'

    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    //api 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1' // if you want to use the Glide GPU Filters
    implementation 'com.netease.nimlib:basesdk:+'
    implementation 'com.netease.nimlib:chatroom:+'
    implementation 'com.netease.nimlib:lucene:+'
    implementation 'com.netease.nimlib:superteam:+'
}
